/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as LambdaIntegrationParametersValidator } from './schemas/lambda-integration-parameters.schema.js'
import { validate as StateMachineCompileInputValidator } from './schemas/state-machine-compile-input.schema.js'

export type LambdaIntegrationParameters = {
    [k: string]: unknown
} & {
    FunctionName: string
    Payload: unknown
}

export const LambdaIntegrationParameters = {
    validate: LambdaIntegrationParametersValidator as ValidateFunction<LambdaIntegrationParameters>,
    get schema() {
        return LambdaIntegrationParameters.validate.schema
    },
    get errors() {
        return LambdaIntegrationParameters.validate.errors ?? undefined
    },
    is: (o: unknown): o is LambdaIntegrationParameters => LambdaIntegrationParameters.validate(o) === true,
    parse: (o: unknown): { right: LambdaIntegrationParameters } | { left: DefinedError[] } => {
        if (LambdaIntegrationParameters.is(o)) {
            return { right: o }
        }
        return { left: (LambdaIntegrationParameters.errors ?? []) as DefinedError[] }
    },
} as const

export interface StateMachineCompileInput {
    file: string
    export: string
    awsRegion: string
    awsAccountId: string
}

export const StateMachineCompileInput = {
    validate: StateMachineCompileInputValidator as ValidateFunction<StateMachineCompileInput>,
    get schema() {
        return StateMachineCompileInput.validate.schema
    },
    get errors() {
        return StateMachineCompileInput.validate.errors ?? undefined
    },
    is: (o: unknown): o is StateMachineCompileInput => StateMachineCompileInput.validate(o) === true,
    parse: (o: unknown): { right: StateMachineCompileInput } | { left: DefinedError[] } => {
        if (StateMachineCompileInput.is(o)) {
            return { right: o }
        }
        return { left: (StateMachineCompileInput.errors ?? []) as DefinedError[] }
    },
} as const
