/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import type { ValidateFunction } from 'ajv'
import { type CatchOptions, type RetryOptions } from './base.type.js'
import { type ChoiceState } from './choice.type.js'

export interface FailState {
    Type: 'Fail'
    Comment?: string
}

export interface ItemBatcher {
    MaxItemsPerBatchPath?: {
        [k: string]: number | undefined
    }
    MaxInputBytesPerBatchPath?: {
        [k: string]: number | undefined
    }
}

export interface ItemProcessor {
    ProcessorConfig?: ProcessConfig
    StartAt: string
    States: {
        [k: string]: TaskState | undefined
    }
}

export interface ItemReader {
    ReaderConfig?: ReaderConfig
    Resource?: string
    Parameters?: Parameters
}

export type MapState =
    | {
          Type: 'Map'
          Comment?: string
          InputPath?: string
          OutputPath?: string
          ResultPath?: string
          Parameters?: unknown
          ResultSelector?: unknown
          Retry?: [RetryOptions, ...RetryOptions[]]
          Catch?: [CatchOptions, ...CatchOptions[]]
          MaxConcurrency?: number
          ItemsPath?: string
          Iterator: StateMachine
          ItemProcessor: ItemProcessor
          ItemReader?: ItemReader
          ItemSelector?: {
              [k: string]: string | undefined
          }
          ItemBatcher?: ItemBatcher
          MaxConcurrencyPath?: string
          Label?: string
          ToleratedFailurePercentage?: number
          ToleratedFailurePercentagePath?: string
          ToleratedFailureCount?: number
          ToleratedFailureCountPath?: string
          ResultWriter?: string
          End: boolean
      }
    | {
          Type: 'Map'
          Comment?: string
          InputPath?: string
          OutputPath?: string
          ResultPath?: string
          Parameters?: unknown
          ResultSelector?: unknown
          Retry?: [RetryOptions, ...RetryOptions[]]
          Catch?: [CatchOptions, ...CatchOptions[]]
          MaxConcurrency?: number
          ItemsPath?: string
          Iterator: StateMachine
          ItemProcessor: ItemProcessor
          ItemReader?: ItemReader
          ItemSelector?: {
              [k: string]: string | undefined
          }
          ItemBatcher?: ItemBatcher
          MaxConcurrencyPath?: string
          Label?: string
          ToleratedFailurePercentage?: number
          ToleratedFailurePercentagePath?: string
          ToleratedFailureCount?: number
          ToleratedFailureCountPath?: string
          ResultWriter?: string
          Next: string
      }

export type ParallelState =
    | {
          Type: 'Parallel'
          Comment?: string
          InputPath?: string
          OutputPath?: string
          ResultPath?: string
          Parameters?: unknown
          ResultSelector?: unknown
          Retry?: [RetryOptions, ...RetryOptions[]]
          Catch?: [CatchOptions, ...CatchOptions[]]
          Branches: [StateMachine, ...StateMachine[]]
          End: boolean
      }
    | {
          Type: 'Parallel'
          Comment?: string
          InputPath?: string
          OutputPath?: string
          ResultPath?: string
          Parameters?: unknown
          ResultSelector?: unknown
          Retry?: [RetryOptions, ...RetryOptions[]]
          Catch?: [CatchOptions, ...CatchOptions[]]
          Branches: [StateMachine, ...StateMachine[]]
          Next: string
      }

export interface Parameters {
    Bucket?: string
    Key?: string
}

export type PassState =
    | {
          Type: 'Pass'
          Comment?: string
          InputPath?: string
          OutputPath?: string
          ResultPath?: string
          Parameters?: unknown
          Result?: unknown
          End: boolean
      }
    | {
          Type: 'Pass'
          Comment?: string
          InputPath?: string
          OutputPath?: string
          ResultPath?: string
          Parameters?: unknown
          Result?: unknown
          Next: string
      }

export interface ProcessConfig {
    Mode: string
    ExecutionType: string
}

export interface ReaderConfig {
    InputType?: string
    CSVHeaderLocation?: string
    CSVHeaders?: [string, ...string[]]
    MaxItems?: number
}

export type State = TaskState | ParallelState | MapState | PassState | WaitState | ChoiceState | SucceedState | FailState

export interface StateMachine {
    Comment?: string
    StartAt: string
    States: {
        [k: string]:
            | (TaskState | ParallelState | MapState | PassState | WaitState | ChoiceState | SucceedState | FailState)
            | undefined
    }
    TimeoutSeconds?: number
}

export const StateMachine = {
    validate: (await import('./schemas/state-machine.schema.js')).validate as ValidateFunction<StateMachine>,
    get schema() {
        return StateMachine.validate.schema
    },
    get errors() {
        return StateMachine.validate.errors ?? undefined
    },
    is: (o: unknown): o is StateMachine => StateMachine.validate(o) === true,
} as const

export interface SucceedState {
    Type: 'Succeed'
    Comment?: string
    InputPath?: string
    OutputPath?: string
}

export type TaskState =
    | {
          Type: 'Task'
          Comment?: string
          InputPath?: string
          OutputPath?: string
          ResultPath?: string
          Parameters?: unknown
          ResultSelector?: unknown
          Retry?: [RetryOptions, ...RetryOptions[]]
          Catch?: [CatchOptions, ...CatchOptions[]]
          Resource: string
          TimeoutSeconds?: number
          HeartbeatSeconds?: number
          TimeoutSecondsPath?: string
          HeartbeatSecondsPath?: string
          End: boolean
      }
    | {
          Type: 'Task'
          Comment?: string
          InputPath?: string
          OutputPath?: string
          ResultPath?: string
          Parameters?: unknown
          ResultSelector?: unknown
          Retry?: [RetryOptions, ...RetryOptions[]]
          Catch?: [CatchOptions, ...CatchOptions[]]
          Resource: string
          TimeoutSeconds?: number
          HeartbeatSeconds?: number
          TimeoutSecondsPath?: string
          HeartbeatSecondsPath?: string
          Next: string
      }

export type WaitState =
    | {
          Type: 'Wait'
          Comment?: string
          InputPath?: string
          OutputPath?: string
          End: boolean
      }
    | {
          Type: 'Wait'
          Comment?: string
          InputPath?: string
          OutputPath?: string
          Next: string
      }
